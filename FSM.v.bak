
module FSM (clk,state_reg,state_next,tick_GENERATE,tick_ENCODE,tick_WRITE_TO_1,tick_IDLE,tick_READ);

//INPUTS:
input clk;
input tick_GENERATE;
input tick_ENCODE;
input [1:0] state_reg;
input tick_WRITE_TO_1;
input tick_IDLE;
integer counter = 0;

//OUTPUTS:
output reg [1:0] state_next;
output reg tick_READ;
//state_next - REGISTER THAT STORES VALUE OF THE STATE THAT WILL BE AFTER ONE CLOCK CYCLE FROM "NOW"

initial begin
	state_next <= 2'b00;
	tick_READ <= 1'b0;
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
always @(posedge clk) begin 
	if (counter != 32) begin
		 case (state_reg)
			  0 : begin
					if (tick_GENERATE || tick_IDLE) begin
						state_next = 1;
					end
					else begin 
						 state_next = 0; 
					end
			  end
			  1 : begin
					if (tick_ENCODE) begin
						state_next = 2;
					end
					else begin
						 state_next = 1; 
					end
			  end
			  2 : begin
				  if (tick_WRITE_TO_1) begin
						state_next = 3;
					end
					else begin 
						 state_next = 2; 
					end
			  end
			  3 : begin
						state_next = 0;
						counter = counter + 1;
				end
				default: begin
						state_next = 0;
					end
		 endcase
		 
		 if (counter == 32) begin
			tick_READ <= 1'b1;
			counter <= 0;
		 end
	end
end 

endmodule
////////////////////////////////////////////////////////////////////////////////////////////////////////////////